[
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "customtkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "customtkinter",
        "description": "customtkinter",
        "detail": "customtkinter",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "builtins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "builtins",
        "description": "builtins",
        "detail": "builtins",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "speed",
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "isExtraImport": true,
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "fix_frame",
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "isExtraImport": true,
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "compress_with_ffmpg",
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "isExtraImport": true,
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "center_window",
        "importPath": "ui_functions",
        "description": "ui_functions",
        "isExtraImport": true,
        "detail": "ui_functions",
        "documentation": {}
    },
    {
        "label": "create_slider",
        "importPath": "ui_functions",
        "description": "ui_functions",
        "isExtraImport": true,
        "detail": "ui_functions",
        "documentation": {}
    },
    {
        "label": "create_entry_with_label",
        "importPath": "ui_functions",
        "description": "ui_functions",
        "isExtraImport": true,
        "detail": "ui_functions",
        "documentation": {}
    },
    {
        "label": "shift_frame",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def shift_frame(frame: np.ndarray, x: int, y: int):\n    if x == 0 and y == 0:\n        return frame\n    h, w, _ = frame.shape\n    M = np.float32([[1, 0, x], [0, 1, y]]) # type: ignore\n    return cv2.warpAffine(frame, M, (w, h), borderValue=[255, 255, 255]) #type: ignore\ndef sharpen_image(frame: np.ndarray, percentage: float) -> np.ndarray:\n    \"\"\"\n    Sharpens the given frame using an unsharp mask with the specified sharpening percentage.\n    \"\"\"",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "sharpen_image",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def sharpen_image(frame: np.ndarray, percentage: float) -> np.ndarray:\n    \"\"\"\n    Sharpens the given frame using an unsharp mask with the specified sharpening percentage.\n    \"\"\"\n    if percentage == 0:\n        return frame\n    percentage = max(0, min(100, percentage)) / 100\n    frame_float = frame.astype(np.float64)\n    blurred = cv2.GaussianBlur(frame_float, (0, 0), sigmaX=3, sigmaY=3)\n    sharpened = cv2.addWeighted(frame_float, 1.0 + percentage, blurred, -percentage, 0)",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "zoom",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def zoom(frame: np.ndarray, percentage: int = 60) -> np.ndarray:\n    h, w, _ = frame.shape\n    crop_margin_x = w * ((100 - percentage) / 100) / 2\n    crop_margin_y = h * ((100 - percentage) / 100) / 2\n    x1 = int(crop_margin_x)\n    y1 = int(crop_margin_y)\n    x2 = int(w - crop_margin_x)\n    y2 = int(h - crop_margin_y)\n    return frame[y1:y2, x1:x2]\ndef resize_frame(frame: np.ndarray, width: int, height: int):",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "resize_frame",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def resize_frame(frame: np.ndarray, width: int, height: int):\n    return cv2.resize(frame, (width, height))\ndef sharpen_image_old(frame: np.ndarray, percentage: float):\n    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], dtype=np.float32)\n    scaled_kernel = kernel * ((100 - percentage) / 100)\n    return cv2.filter2D(frame, -1, scaled_kernel)\ndef speed(video_capture, percentage: float = 30):\n    original_frame_rate = video_capture.get(cv2.CAP_PROP_FPS)\n    return original_frame_rate * (100 + percentage) / 100\ndef adjust_contrast(frame: np.ndarray, percentage: float):",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "sharpen_image_old",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def sharpen_image_old(frame: np.ndarray, percentage: float):\n    kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], dtype=np.float32)\n    scaled_kernel = kernel * ((100 - percentage) / 100)\n    return cv2.filter2D(frame, -1, scaled_kernel)\ndef speed(video_capture, percentage: float = 30):\n    original_frame_rate = video_capture.get(cv2.CAP_PROP_FPS)\n    return original_frame_rate * (100 + percentage) / 100\ndef adjust_contrast(frame: np.ndarray, percentage: float):\n    alpha = (100 + percentage) / 100\n    return cv2.convertScaleAbs(frame, alpha=alpha, beta=0)",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "speed",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def speed(video_capture, percentage: float = 30):\n    original_frame_rate = video_capture.get(cv2.CAP_PROP_FPS)\n    return original_frame_rate * (100 + percentage) / 100\ndef adjust_contrast(frame: np.ndarray, percentage: float):\n    alpha = (100 + percentage) / 100\n    return cv2.convertScaleAbs(frame, alpha=alpha, beta=0)\ndef adjust_saturation(frame: np.ndarray, percentage: float):\n    if percentage == 0:\n        return frame\n    saturation_scale = (100 + percentage) / 100",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "adjust_contrast",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def adjust_contrast(frame: np.ndarray, percentage: float):\n    alpha = (100 + percentage) / 100\n    return cv2.convertScaleAbs(frame, alpha=alpha, beta=0)\ndef adjust_saturation(frame: np.ndarray, percentage: float):\n    if percentage == 0:\n        return frame\n    saturation_scale = (100 + percentage) / 100\n    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n    h, s, v = cv2.split(hsv)\n    s = cv2.convertScaleAbs(s, alpha=saturation_scale, beta=0)",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "adjust_saturation",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def adjust_saturation(frame: np.ndarray, percentage: float):\n    if percentage == 0:\n        return frame\n    saturation_scale = (100 + percentage) / 100\n    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n    h, s, v = cv2.split(hsv)\n    s = cv2.convertScaleAbs(s, alpha=saturation_scale, beta=0)\n    hsv = cv2.merge(np.array([h, s, v]))\n    return cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)\ndef add_shadow(frame: np.ndarray, percentage: float):",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "add_shadow",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def add_shadow(frame: np.ndarray, percentage: float):\n    if percentage == 0:\n        return frame\n    shadow_intensity = percentage / 100.0\n    shadow_frame = frame * (1 - shadow_intensity)\n    return shadow_frame.astype(np.uint8)\ndef add_highlight(frame: np.ndarray, percentage: float):\n    if percentage == 0:\n        return frame\n    highlight_intensity = percentage / 100.0",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "add_highlight",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def add_highlight(frame: np.ndarray, percentage: float):\n    if percentage == 0:\n        return frame\n    highlight_intensity = percentage / 100.0\n    highlight_frame = frame + (255 - frame) * highlight_intensity\n    np.clip(highlight_frame, 0, 255, out=highlight_frame)\n    return highlight_frame.astype(np.uint8)\ndef fix_frame(\n    frame,\n    zoom_percentage=60,",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "fix_frame",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def fix_frame(\n    frame,\n    zoom_percentage=60,\n    sharpen_percentage=0.1,\n    contrast_percentage=3,\n    saturation_percentage=-20,\n    width=1920,\n    height=1080,\n    shadow_percentage=0,\n    highlight_percentage=0,",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "compress_with_ffmpg",
        "kind": 2,
        "importPath": "image_editing_functions",
        "description": "image_editing_functions",
        "peekOfCode": "def compress_with_ffmpg(\n    input_file: str, output_file: str, target_bitrate=\"7000k\", crf_value=\"18\"\n):\n    import subprocess\n    ffmpeg_command = [\n        \"ffmpeg\",\n        \"-i\",\n        input_file,\n        \"-c:v\",\n        \"libx264\",",
        "detail": "image_editing_functions",
        "documentation": {}
    },
    {
        "label": "create_slider",
        "kind": 2,
        "importPath": "ui_functions",
        "description": "ui_functions",
        "peekOfCode": "def create_slider(root, label, from_, to_, initial_value):\n    frame = ctk.CTkFrame(root)  # Create a frame without padding\n    frame.pack(padx=10, pady=2, fill=ctk.X, expand=True)  # Apply padding during packing\n    ctk.CTkLabel(frame, text=label, font=(\"Arial\", 12), width=80).pack(side=ctk.LEFT, padx=5, anchor='w')\n    var = ctk.StringVar()\n    var.set(initial_value)\n    def update_slider(*args):\n        val = var.get()\n        if val.isdigit() or (val.startswith(\"-\") and val[1:].isdigit()):\n            slider.set(int(val))",
        "detail": "ui_functions",
        "documentation": {}
    },
    {
        "label": "create_entry_with_label",
        "kind": 2,
        "importPath": "ui_functions",
        "description": "ui_functions",
        "peekOfCode": "def create_entry_with_label(\n    root, label_text, initial_value, width=200, padx=10, pady=2\n):\n    container_frame = ctk.CTkFrame(root)\n    container_frame.pack(fill=ctk.X, padx=padx, pady=pady)\n    # Set label with fixed width of 100 pixels in the constructor\n    label = ctk.CTkLabel(container_frame, text=label_text, width=100)\n    label.grid(row=0, column=0, sticky='w', padx=(0, 5))\n    entry = ctk.CTkEntry(container_frame, width=width)\n    entry.insert(0, initial_value)",
        "detail": "ui_functions",
        "documentation": {}
    },
    {
        "label": "center_window",
        "kind": 2,
        "importPath": "ui_functions",
        "description": "ui_functions",
        "peekOfCode": "def center_window(root, width=400, height=450):\n    screen_width = root.winfo_screenwidth()\n    screen_height = root.winfo_screenheight()\n    x = int((screen_width / 2) - (width / 2))\n    y = int((screen_height / 2) - (height / 2))\n    root.geometry(f\"{width}x{height}+{x}+{y}\")",
        "detail": "ui_functions",
        "documentation": {}
    },
    {
        "label": "run_script",
        "kind": 2,
        "importPath": "video_editing_1",
        "description": "video_editing_1",
        "peekOfCode": "def run_script():\n    file_paths = list(Path(builtins.source_path_entry.get()).glob(\"*.*\"))\n    target_path = builtins.target_path_entry.get()\n    speed_percentage = float(builtins.speed_slider[0].get())\n    width = int(builtins.width_entry.get())\n    height = int(builtins.height_entry.get())\n    params = {\n        \"width\": width,\n        \"height\": height,\n        \"shift_x\": float(builtins.shift_left[0].get()),",
        "detail": "video_editing_1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "video_editing_1",
        "description": "video_editing_1",
        "peekOfCode": "def main():\n    root = ctk.CTk()\n    root.title(\"Video Frame Fixer\")\n    left_frame = ctk.CTkFrame(root, width=400)\n    left_frame.pack(side=ctk.LEFT, padx=10, pady=10, fill=ctk.Y)\n    # Add widgets to the left frame\n    builtins.source_path_entry = create_entry_with_label(\n        left_frame, \"Source Path\", DEFAULT_SOURCE\n    )\n    builtins.target_path_entry = create_entry_with_label(",
        "detail": "video_editing_1",
        "documentation": {}
    },
    {
        "label": "fourcc",
        "kind": 5,
        "importPath": "video_editing_1",
        "description": "video_editing_1",
        "peekOfCode": "fourcc = cv2.VideoWriter_fourcc(*\"mp4v\")\nDEFAULT_SOURCE = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\before\"\nDEFAULT_TARGET = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\after\"\nif Path(\"test/input\").exists():\n    DEFAULT_SOURCE = \"test/input\"\n    DEFAULT_TARGET = \"test/output\"\n    MAX_FRAMES = 100\n# ==========================   UI     ================================\ndef run_script():\n    file_paths = list(Path(builtins.source_path_entry.get()).glob(\"*.*\"))",
        "detail": "video_editing_1",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SOURCE",
        "kind": 5,
        "importPath": "video_editing_1",
        "description": "video_editing_1",
        "peekOfCode": "DEFAULT_SOURCE = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\before\"\nDEFAULT_TARGET = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\after\"\nif Path(\"test/input\").exists():\n    DEFAULT_SOURCE = \"test/input\"\n    DEFAULT_TARGET = \"test/output\"\n    MAX_FRAMES = 100\n# ==========================   UI     ================================\ndef run_script():\n    file_paths = list(Path(builtins.source_path_entry.get()).glob(\"*.*\"))\n    target_path = builtins.target_path_entry.get()",
        "detail": "video_editing_1",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TARGET",
        "kind": 5,
        "importPath": "video_editing_1",
        "description": "video_editing_1",
        "peekOfCode": "DEFAULT_TARGET = \"C:\\\\Users\\\\Ben\\\\Desktop\\\\after\"\nif Path(\"test/input\").exists():\n    DEFAULT_SOURCE = \"test/input\"\n    DEFAULT_TARGET = \"test/output\"\n    MAX_FRAMES = 100\n# ==========================   UI     ================================\ndef run_script():\n    file_paths = list(Path(builtins.source_path_entry.get()).glob(\"*.*\"))\n    target_path = builtins.target_path_entry.get()\n    speed_percentage = float(builtins.speed_slider[0].get())",
        "detail": "video_editing_1",
        "documentation": {}
    }
]